// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package transfer

import (
	"context"
	"simple-bank/pkg/domain/entities"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			ListTransfersByAccountIDFunc: func(contextMoqParam context.Context, s string) ([]entities.Transfer, error) {
// 				panic("mock out the ListTransfersByAccountID method")
// 			},
// 			PerformTransferenceFunc: func(contextMoqParam context.Context, performTransferenceInput entities.PerformTransferenceInput) error {
// 				panic("mock out the PerformTransference method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// ListTransfersByAccountIDFunc mocks the ListTransfersByAccountID method.
	ListTransfersByAccountIDFunc func(contextMoqParam context.Context, s string) ([]entities.Transfer, error)

	// PerformTransferenceFunc mocks the PerformTransference method.
	PerformTransferenceFunc func(contextMoqParam context.Context, performTransferenceInput entities.PerformTransferenceInput) error

	// calls tracks calls to the methods.
	calls struct {
		// ListTransfersByAccountID holds details about calls to the ListTransfersByAccountID method.
		ListTransfersByAccountID []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
		// PerformTransference holds details about calls to the PerformTransference method.
		PerformTransference []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// PerformTransferenceInput is the performTransferenceInput argument value.
			PerformTransferenceInput entities.PerformTransferenceInput
		}
	}
	lockListTransfersByAccountID sync.RWMutex
	lockPerformTransference      sync.RWMutex
}

// ListTransfersByAccountID calls ListTransfersByAccountIDFunc.
func (mock *RepositoryMock) ListTransfersByAccountID(contextMoqParam context.Context, s string) ([]entities.Transfer, error) {
	if mock.ListTransfersByAccountIDFunc == nil {
		panic("RepositoryMock.ListTransfersByAccountIDFunc: method is nil but Repository.ListTransfersByAccountID was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockListTransfersByAccountID.Lock()
	mock.calls.ListTransfersByAccountID = append(mock.calls.ListTransfersByAccountID, callInfo)
	mock.lockListTransfersByAccountID.Unlock()
	return mock.ListTransfersByAccountIDFunc(contextMoqParam, s)
}

// ListTransfersByAccountIDCalls gets all the calls that were made to ListTransfersByAccountID.
// Check the length with:
//     len(mockedRepository.ListTransfersByAccountIDCalls())
func (mock *RepositoryMock) ListTransfersByAccountIDCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockListTransfersByAccountID.RLock()
	calls = mock.calls.ListTransfersByAccountID
	mock.lockListTransfersByAccountID.RUnlock()
	return calls
}

// PerformTransference calls PerformTransferenceFunc.
func (mock *RepositoryMock) PerformTransference(contextMoqParam context.Context, performTransferenceInput entities.PerformTransferenceInput) error {
	if mock.PerformTransferenceFunc == nil {
		panic("RepositoryMock.PerformTransferenceFunc: method is nil but Repository.PerformTransference was just called")
	}
	callInfo := struct {
		ContextMoqParam          context.Context
		PerformTransferenceInput entities.PerformTransferenceInput
	}{
		ContextMoqParam:          contextMoqParam,
		PerformTransferenceInput: performTransferenceInput,
	}
	mock.lockPerformTransference.Lock()
	mock.calls.PerformTransference = append(mock.calls.PerformTransference, callInfo)
	mock.lockPerformTransference.Unlock()
	return mock.PerformTransferenceFunc(contextMoqParam, performTransferenceInput)
}

// PerformTransferenceCalls gets all the calls that were made to PerformTransference.
// Check the length with:
//     len(mockedRepository.PerformTransferenceCalls())
func (mock *RepositoryMock) PerformTransferenceCalls() []struct {
	ContextMoqParam          context.Context
	PerformTransferenceInput entities.PerformTransferenceInput
} {
	var calls []struct {
		ContextMoqParam          context.Context
		PerformTransferenceInput entities.PerformTransferenceInput
	}
	mock.lockPerformTransference.RLock()
	calls = mock.calls.PerformTransference
	mock.lockPerformTransference.RUnlock()
	return calls
}
