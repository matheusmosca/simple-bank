// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package account

import (
	"context"
	"sync"

	"github.com/matheusmosca/simple-bank/pkg/domain/entities"
)

// Ensure, that UseCaseMock does implement UseCase.
// If this is not the case, regenerate this file with moq.
var _ UseCase = &UseCaseMock{}

// UseCaseMock is a mock implementation of UseCase.
//
// 	func TestSomethingThatUsesUseCase(t *testing.T) {
//
// 		// make and configure a mocked UseCase
// 		mockedUseCase := &UseCaseMock{
// 			CreateFunc: func(ctx context.Context, input entities.CreateAccountInput) (*entities.Account, error) {
// 				panic("mock out the Create method")
// 			},
// 			GetByCPFFunc: func(ctx context.Context, CPF string) (*entities.Account, error) {
// 				panic("mock out the GetByCPF method")
// 			},
// 			GetByIDFunc: func(ctx context.Context, accountID string) (*entities.Account, error) {
// 				panic("mock out the GetByID method")
// 			},
// 			ListFunc: func(ctx context.Context) ([]entities.Account, error) {
// 				panic("mock out the List method")
// 			},
// 		}
//
// 		// use mockedUseCase in code that requires UseCase
// 		// and then make assertions.
//
// 	}
type UseCaseMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, input entities.CreateAccountInput) (*entities.Account, error)

	// GetByCPFFunc mocks the GetByCPF method.
	GetByCPFFunc func(ctx context.Context, CPF string) (*entities.Account, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, accountID string) (*entities.Account, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]entities.Account, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Input is the input argument value.
			Input entities.CreateAccountInput
		}
		// GetByCPF holds details about calls to the GetByCPF method.
		GetByCPF []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CPF is the CPF argument value.
			CPF string
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCreate   sync.RWMutex
	lockGetByCPF sync.RWMutex
	lockGetByID  sync.RWMutex
	lockList     sync.RWMutex
}

// Create calls CreateFunc.
func (mock *UseCaseMock) Create(ctx context.Context, input entities.CreateAccountInput) (*entities.Account, error) {
	if mock.CreateFunc == nil {
		panic("UseCaseMock.CreateFunc: method is nil but UseCase.Create was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Input entities.CreateAccountInput
	}{
		Ctx:   ctx,
		Input: input,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, input)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedUseCase.CreateCalls())
func (mock *UseCaseMock) CreateCalls() []struct {
	Ctx   context.Context
	Input entities.CreateAccountInput
} {
	var calls []struct {
		Ctx   context.Context
		Input entities.CreateAccountInput
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByCPF calls GetByCPFFunc.
func (mock *UseCaseMock) GetByCPF(ctx context.Context, CPF string) (*entities.Account, error) {
	if mock.GetByCPFFunc == nil {
		panic("UseCaseMock.GetByCPFFunc: method is nil but UseCase.GetByCPF was just called")
	}
	callInfo := struct {
		Ctx context.Context
		CPF string
	}{
		Ctx: ctx,
		CPF: CPF,
	}
	mock.lockGetByCPF.Lock()
	mock.calls.GetByCPF = append(mock.calls.GetByCPF, callInfo)
	mock.lockGetByCPF.Unlock()
	return mock.GetByCPFFunc(ctx, CPF)
}

// GetByCPFCalls gets all the calls that were made to GetByCPF.
// Check the length with:
//     len(mockedUseCase.GetByCPFCalls())
func (mock *UseCaseMock) GetByCPFCalls() []struct {
	Ctx context.Context
	CPF string
} {
	var calls []struct {
		Ctx context.Context
		CPF string
	}
	mock.lockGetByCPF.RLock()
	calls = mock.calls.GetByCPF
	mock.lockGetByCPF.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *UseCaseMock) GetByID(ctx context.Context, accountID string) (*entities.Account, error) {
	if mock.GetByIDFunc == nil {
		panic("UseCaseMock.GetByIDFunc: method is nil but UseCase.GetByID was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, accountID)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//     len(mockedUseCase.GetByIDCalls())
func (mock *UseCaseMock) GetByIDCalls() []struct {
	Ctx       context.Context
	AccountID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *UseCaseMock) List(ctx context.Context) ([]entities.Account, error) {
	if mock.ListFunc == nil {
		panic("UseCaseMock.ListFunc: method is nil but UseCase.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedUseCase.ListCalls())
func (mock *UseCaseMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
