// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package auth

import (
	"context"
	"sync"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked Service
// 		mockedService := &ServiceMock{
// 			AuthenticateFunc: func(ctx context.Context, CPF string, secret string) (string, error) {
// 				panic("mock out the Authenticate method")
// 			},
// 		}
//
// 		// use mockedService in code that requires Service
// 		// and then make assertions.
//
// 	}
type ServiceMock struct {
	// AuthenticateFunc mocks the Authenticate method.
	AuthenticateFunc func(ctx context.Context, CPF string, secret string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Authenticate holds details about calls to the Authenticate method.
		Authenticate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CPF is the CPF argument value.
			CPF string
			// Secret is the secret argument value.
			Secret string
		}
	}
	lockAuthenticate sync.RWMutex
}

// Authenticate calls AuthenticateFunc.
func (mock *ServiceMock) Authenticate(ctx context.Context, CPF string, secret string) (string, error) {
	if mock.AuthenticateFunc == nil {
		panic("ServiceMock.AuthenticateFunc: method is nil but Service.Authenticate was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		CPF    string
		Secret string
	}{
		Ctx:    ctx,
		CPF:    CPF,
		Secret: secret,
	}
	mock.lockAuthenticate.Lock()
	mock.calls.Authenticate = append(mock.calls.Authenticate, callInfo)
	mock.lockAuthenticate.Unlock()
	return mock.AuthenticateFunc(ctx, CPF, secret)
}

// AuthenticateCalls gets all the calls that were made to Authenticate.
// Check the length with:
//     len(mockedService.AuthenticateCalls())
func (mock *ServiceMock) AuthenticateCalls() []struct {
	Ctx    context.Context
	CPF    string
	Secret string
} {
	var calls []struct {
		Ctx    context.Context
		CPF    string
		Secret string
	}
	mock.lockAuthenticate.RLock()
	calls = mock.calls.Authenticate
	mock.lockAuthenticate.RUnlock()
	return calls
}
